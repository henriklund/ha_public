{%- macro PeriodPrice(mySensor_today,
                      mySensor_tomorrow = mySensor_today if mySensor_today is string else dict(),
                      mySensor_forecast = mySensor_today if mySensor_today is string else dict(),
                      earliestDatetime = null, latestDatetime=null,
                      duration = 60,
                      returnFirstBool = true,
                      timeAdherence = "default",
                      mode = "default",
                      hint = "",
                      usageWindow = 60,
                      kwh_usage = [],
                      validateData = "ignore"
                    ) -%}

{# Constants #}
{%- set defaultDurationMinNum = 5 -%}
{%- set defaultPeriodHrsNum   = 24 -%}
{%- set defaultTimeTag        = "start" -%}
{%- set defaultPriceTag       = "price" -%}

  {#-####################################################################-#}
  {#-
    Note that macro can be called adding just the mySensor_today parameter. Any parameter can be added in any order
    providing that it is written using the parameter name. When leaving out parameters, this is mandatory to ensure
    correct parsing. E.g. {{- PeriodPrice("sensor.edssensor", duration=timedelta(minutes=90)) -}}

    Documentation can be found here: https://github.com/henriklund/ha_public/blob/main/script/public/README.md#electricityjinja
  -#}
  {#-####################################################################-#}
    {%- macro LoadSensor(data, timeTag=none, priceTag=none) -%}
      {%- set datePrice = namespace(dateTag=none, date = none, priceTag=none, price = none) -%}
      {%- if data != none and data | length > 0 -%}

        {%- if timeTag == none and priceTag == none and data[0][defaultTimeTag] is defined and data[0][defaultPriceTag] is defined -%}
          {%- set timeTag = defaultTimeTag -%}
          {%- set priceTag = defaultPriceTag -%}
        {# If one of the tags is missing, assume we need to look for them both #}
        {%- elif timeTag not in data[0] or priceTag not in data[0] -%}
          {%- for item in data[0] -%}
            {# This check should cover both datetime objects, strings and timestamps delivered as "time" #}
            {% set vObj = data[0][item] %}
            {%- if vObj | as_datetime is datetime and (vObj is not number or vObj > 99999999) -%}
              {%- set tmpTime = vObj | as_datetime | as_timestamp -%}
              {%- set datePrice.dateTag = datePrice.dateTag if datePrice.date!=none and datePrice.date < tmpTime else item -%}
              {%- set datePrice.date    = datePrice.date | as_datetime   if datePrice.date!=none and datePrice.date < tmpTime else tmpTime -%}
            {# Only process something that is a number as a number, and only for the first match #}
            {%- elif vObj is number and (vObj | int(2) - vObj | int(1) == 0) and datePrice.price == none -%}
              {% set datePrice.price = vObj -%}
              {% set datePrice.priceTag = item -%}
            {%- endif -%}
          {%- endfor -%}
        {%- endif -%}

        {# If no tags were passed on, assume tags found are to be used. If tags were passed on, only use them if the are found in data set #}
        {%- set timeTag  = ("start" if "start" in data[0] else datePrice.dateTag)  if  timeTag is none else (timeTag if timeTag in data[0] else none)%}
        {%- set priceTag = ("price" if "price" in data[0] else datePrice.priceTag) if priceTag is none else (priceTag if priceTag in data[0] else none) -%}

        {%- set newSensor = namespace(dict=[]) -%}
        {# Make up for the odd case where both are identical (not valid result) or one of the tags is None. If not the case, rebuild the set #}
        {%- if timeTag != priceTag and timeTag != none and priceTag != none -%}
          {%- for item in data -%}
            {%- set newSensor.dict = newSensor.dict + [dict(start=(item[timeTag] | as_datetime | as_timestamp ), price=item[priceTag])] -%}
          {%- endfor -%}
        {%- endif -%}
        {{- newSensor.dict | to_json -}}
      {%- else -%}
        {{- [] -}}
      {%- endif -%}
    {%- endmacro -%}
  
  {#-####################################################################-#}
    {%- macro OptimizeData(workData, priceWindows) -%}
      {#- Load prices in datetime format for easy comparison -#}
      {%- set startTimes = priceWindows | map(attribute="start") | map("as_datetime") | map("as_local") | list -%}
      {%- set ns=namespace(dict=[]) %}
      {%- set ws=namespace(start=none, minutes=none, kWh_price=none, est_kWh=none, sum=none) %}
      
      {%- for i in range(workData | length) %}
        {%- set item = workData[i] %}

        {#- Compact list based on the different price slots -#}
        {%- if (i>0) and not(ws.start | as_datetime + timedelta(minutes=ws.minutes)) in startTimes %}
          {%- set ws.minutes = ws.minutes + item.minutes %}
          {%- set ws.est_kWh = ws.est_kWh + item.est_kWh %}
          {%- set ws.sum = ws.sum + item.sum %}
        {%- else %}
          {%- if i>0 %}
            {%- set ns.dict=ns.dict+[dict(start=ws.start, minutes=ws.minutes, kWh_price=ws.kWh_price, est_kWh=ws.est_kWh | round(6), sum=ws.sum | round(6))] %}
          {%- endif %}
          {%- set ws.start=item.start %}
          {%- set ws.minutes=item.minutes %}
          {%- set ws.kWh_price=item.kWh_price %}
          {%- set ws.est_kWh=item.est_kWh %}
          {%- set ws.sum=item.sum %}
        {%- endif %}
        {#- Get the last record stored -#}
        {%- if i==workData | length-1 %}
          {%- set ns.dict=ns.dict+[dict(start=ws.start, minutes=ws.minutes, kWh_price=ws.kWh_price, est_kWh=ws.est_kWh | round(6), sum=ws.sum | round(6))] %}
        {%- endif %}
      {%- endfor %}
      {{- ns.dict | to_json -}}
    {%- endmacro -%}
  
  {#-####################################################################-#}
  {#- Prepare input parameters -#}
  {%- set status = "ok" -%}

  {#- Blank out unwanted date sets. Order is today -> tomorrow -> forecast. If a set is blanked out, subsequent set(s) are also be blanked out -#}
  {%- if mySensor_today == "" or mySensor_today == [] -%}
    {%- set mySensor_tomorrow = [] -%}
  {%- endif -%}
  {%- if mySensor_tomorrow == "" or mySensor_tomorrow == [] -%}
    {%- set mySensor_forecast = [] -%}
  {%- endif -%}
  {# Retrieve energy prices and process data from sensor and align to naming standard #}
  {%- set hint = hint if hint!="" or mySensor_today is not string else state_attr(mySensor_today, "friendly_name") -%}
  {%- set myToday = (
                      LoadSensor(
                          mySensor_today.data if mySensor_today.data is defined else [], 
                          mySensor_today.timeTag if mySensor_today.timeTag is defined else none, 
                          mySensor_today.priceTag if mySensor_today.priceTag is defined else none
                      )
              if mySensor_today is sequence and mySensor_today is not string else
                      LoadSensor(
                          state_attr(mySensor_today, "raw_today")
                      )
          ) | from_json -%}
  {%- set myTomorrow = (
                      LoadSensor(
                          mySensor_tomorrow.data if mySensor_tomorrow.data is defined else [], 
                          mySensor_tomorrow.timeTag if mySensor_tomorrow.timeTag is defined else none, 
                          mySensor_tomorrow.priceTag if mySensor_tomorrow.priceTag is defined else none
                      )
              if mySensor_tomorrow is sequence and mySensor_tomorrow is not string else
                      LoadSensor(
                          state_attr(mySensor_tomorrow, "raw_tomorrow")
                      )
          ) | from_json -%}
  {%- set myForecast = (
                      LoadSensor(
                          mySensor_forecast.data if mySensor_forecast.data is defined else [], 
                          mySensor_forecast.timeTag if mySensor_forecast.timeTag is defined else none, 
                          mySensor_forecast.priceTag if mySensor_forecast.priceTag is defined else none
                      )
              if mySensor_forecast is sequence and mySensor_forecast is not string else
                      LoadSensor(
                          state_attr(mySensor_forecast, "forecast")
                      )
          ) | from_json -%}

  {#- Retrieve energy prices -#}
  {%- set prices = myToday + myTomorrow + myForecast -%}
  {%- set prices_len = prices | length -%}
  {%- set priceWindow = 60 -%}

  {# Identify how long a price is valid by looking at the first two items. Assume all OK if there is only one set #}
  {%- if prices == [] %} 
    {%- set status="noPrices" -%}
  {%- else -%}
    {%- if usageWindow is not number or (usageWindow > 60) or (usageWindow<1) or (usageWindow != usageWindow | int(0)) -%}
      {%- set status="invalidUsageWindow" -%}
    {%- else -%}
      {%- set usageWindow = usageWindow if usageWindow is defined and usageWindow is number else 60 -%}
    {%- endif -%}

    {%- if prices | length >= 2 -%}
      {%- set priceWindow = ((prices[1].start - prices[0].start) / 60) | int(60) -%}
    {%- endif -%}
  {%- endif -%}
  {%- set priceWindowSeconds = 60 * priceWindow -%}

  {#- Validate price list-#}
  {%- set validateData = validateData | lower if validateData | lower in ["ignore", "prune", "stoponerror"] else "ignore" -%}
  {%- set validate = namespace(check="ok", idx=-1, lastGood=none, this=none) -%}
  {%- if validateData != "ignore" -%}
    {%- for i in range(prices_len) if validate.check == "ok" -%}
      {%- if i>1 and prices[i].start != prices[i-1].start + priceWindowSeconds -%}
        {%- set validate.check = "inconsistentDataset" -%}
        {%- set validate.idx = i -%}
      {%- endif -%}
    {%- endfor -%}
    {%- if validate.check != "ok" -%}
      {%- set validate.lastGood = prices[validate.idx-1] -%}
      {%- set validate.this     = prices[validate.idx] -%}
      {%- if validateData   == "prune" -%}
        {%- set validate.check  = validate.check ~ " - pruned" -%}        
        {%- set prices          = prices[:i] -%}
      {%- elif validateData == "stoponerror" -%}
        {%- set status          = validate.check -%}
        {%- set validate.check  = validate.check ~ " - stopped" -%}
      {%- endif -%}
    {%- endif -%}
  {%- endif -%}
  
  {#- Validate and set duration -#}
  {%- set minDuration            = defaultDurationMinNum if defaultDuration is number else defaultDurationMinNum -%}
  {%- set duration               = (duration.seconds // 60) if duration is not number and duration.total_seconds() is defined else duration -%}
  {%- set duration               = 60 * (minDuration if duration is not defined or (duration | int != duration) or duration < minDuration else duration) -%}
  {%- set durationMinutes        = duration | int(minDuration * priceWindow) // 60 -%}
  {%- set durationMinutesResidual= durationMinutes % priceWindow -%}
  {%- set durationUnits          = ((durationMinutes // priceWindow) + (1 if durationMinutesResidual > 0 else 0)) | int -%}

  {# Handle kWh usage. Create a usage set if needed. Errors are reported when data does not conform to expectations #}
  {%- if status=="ok" -%}
    {%- set reqUsageSlices = (1 if durationMinutes % usageWindow != 0 else 0) -%}
    {#- Build a khw_usage list if a number is provided instead of a list -#}
    {%- if kwh_usage is not sequence and kwh_usage is number -%}
      {%- set tmp = (kwh_usage / durationMinutes) * usageWindow -%}
      {%- set tmpSet = namespace(dict = []) -%}  
      {%- for i in range((durationMinutes // usageWindow) | int) -%}
        {%- set tmpSet.dict = tmpSet.dict + [tmp] -%}
      {%- endfor -%}
      {%- set tmpSet.dict = tmpSet.dict + [(kwh_usage - tmpSet.dict|sum) * (0 if durationMinutes % usageWindow == 0 else (usageWindow / (durationMinutes % usageWindow))) ] -%}
      {%- set kwh_usage = tmpSet.dict -%}
    {%- endif -%}
    {%- set reqUsageSlices = reqUsageSlices + (durationMinutes // usageWindow) -%}
    {%- set usageLen = kwh_usage | length if kwh_usage is sequence and kwh_usage is not string else 0 -%} 
    {%- if usageLen==0 -%}
      {%- set kwh_usage=[] -%}
      {%- set usageWindow = 60 -%}
    {%- elif usageLen>reqUsageSlices -%}
      {%- set kwh_usage=kwh_usage[:reqUsageSlices] -%}
    {%- elif usageLen<reqUsageSlices -%}
      {%- set status="notEnoughKwhPoints" -%}
    {%- endif -%}
  {%- endif -%}

  {%- set arrSize    = prices | length -%}
  {%- set prices_len = arrSize - durationUnits | int + 1 -%}
  
  {%- set timeAdherence       = timeAdherence | lower %}
  {%- if timeAdherence not in ["default", "strict", "forced"] %}
    {%- set timeAdherence = "default" -%}
  {%- endif -%}
  {%- set nowTime                = now() if timeAdherence not in ["strict", "forced"] else earliestDatetime -%}

  {#-###################################-#}
  {#- Validate and set earliestDatetime -#}
  {%- set earliestDatetime       = nowTime if earliestDatetime is not defined or earliestDatetime is not datetime or (earliestDatetime < nowTime) else earliestDatetime -%}
  {#- Strip microseconds and seconds from time -#}
  {%- set earliestDatetimeMinute = earliestDatetime.minute -%}
  {%- set earliestDatetime       = (earliestDatetime | as_timestamp | int) - earliestDatetime.second -%}

  {#-###################################-#}
  {#- Validate and set latestDatetime -#}
  {%- set defPeriodeHours        = defaultPeriodHrsNum if defaultPeriodHrsNum is number else defaultPeriodHrsNum -%}
  {%- set latestDatetime         = nowTime + timedelta(hours=defPeriodeHours) if latestDatetime is not defined or latestDatetime is not datetime or latestDatetime | as_timestamp < earliestDatetime else latestDatetime -%}
  {#- Strip microseconds from time -#}
  {%- set latestDatetimeMinut    = latestDatetime.minute -%}
  {%- set latestDatetimeSecond   = latestDatetime.second -%}
  {%- set latestDatetime         = (latestDatetime | as_timestamp | int) -%}
  {%- set latestDatetime         = latestDatetime + 60 * (0 if latestDatetimeMinut == 0 else (priceWindow-latestDatetimeMinut) % priceWindow) + latestDatetimeSecond -%}
  {#- 
     Extend latestDatetime in case a duration is provided that exceeds the provided latestDatetime
     Note: latestDatetime is only extended by as many minutes as the window is exceeded with
  -#}
  {%- set durationDiff           = max(0, durationMinutes - (latestDatetime - earliestDatetime) // 60) -%}
  {%- set latestDatetime         = latestDatetime + (0 if timeAdherence in ['strict','forced'] else 60 * durationDiff) -%}

  {%- set mode                   = mode | lower -%}
  {%- set mode = mode if mode in [ "default", "details", "detailscompact",
                                   "cheapprice", "cheapstart", "cheapend", "ischeapnow", 
                                   "expensiveprice", "expensivestart", "expensiveend", "isexpensivenow" ] 
                      else "default" -%}

  {%- if status == "ok" %}
    {#- If, under 'strict' time adherence, where the provided latestDatetime is in the past, return an error -#}
    {%- set validTime = (timeAdherence != "strict") or ( (timeAdherence == "strict") and (latestDatetime >= nowTime | as_timestamp) ) -%} 
    {%- if not validTime -%} 
      {%- set status="windowInPast" %}
    {%- endif -%}
  {%- endif -%}
  
  {#-####################################################################-#}
  {#- Set result name spaces -#}
  {%- set resultCheap     = namespace(pricing=none, priceStartTime=None, explain=[]) -%}
  {%- set resultExpensive = namespace(pricing=none, priceStartTime=None, explain=[]) -%}

  {#-####################################################################-#}
  {#- Only run if we have price data and no error so far -#}
  {%- if prices_len > 0 and status=="ok" -%}
    {#- Do not allow latestDatetime to be after last price available - makes no sense -#}
    {%- set tmp = prices[arrSize-1].start + priceWindowSeconds -%}
    {%- set latestDatetime = tmp if latestDatetime > tmp else latestDatetime -%}

    {#-####################################################################-#}
    {#-
       Calculate cheapest leftInPriceWindow for the current hour and all consecutive hours
       Note: This will take the current hour into account thus providingg a calculation for now() + duration,
             as well at calculation placed at the end of a hour
    -#}
    {#- Loop all timeslot where a pricing exists -#}
    {%- set loopSet = [0] -%}
    {%- set tmpVal  = (priceWindow - durationMinutesResidual) % priceWindow -%}
    {%- set loopSet = loopSet + ([] if tmpVal in loopSet else [tmpVal]) -%}
    
    {%- set priceSet          = namespace( idx=0, size=priceWindow, left=0 ) -%}
    {%- set sliceSet          = namespace( idx=0, size=usageWindow, left=0 ) -%}

    {%- set totalLen          = namespace(value=0) -%}
    {%- set timeSet           = namespace(dict=[]) -%}
    {%- set pricing           = namespace(value=0) -%}

    {%- for n in range(prices_len) if (n+1==arrSize or earliestDatetime <= prices[n+1].start) and (prices[n].start + priceWindowSeconds <= latestDatetime) -%}
      {#- Calculat pricing on the hour, at the current minute number as well as at the end of an hour -#}
      {%- if (earliestDatetime - 60 * earliestDatetimeMinute) == prices[n].start -%}
        {%- set tmpVal = earliestDatetimeMinute % priceWindow -%}
        {%- set loopSet = loopSet + ([] if tmpVal in loopSet else [tmpVal]) -%}
      {%- endif -%}

      {#- Iterate through the possible minute sets -#}
      {%- for v in range(loopSet | length) -%}
        {%- set priceStartTime      = prices[n].start + 60 * loopSet[v] -%}
        {%- if earliestDatetime <= priceStartTime -%}
          {%- set priceSet.idx      = n -%}
          {%- set priceSet.left     = min(priceWindow-loopSet[v], durationMinutes) -%}
          {%- set sliceSet.idx      = 0 -%}
          {%- set sliceSet.left     = usageWindow -%}
          
          {%- set totalLen.value    = 0 -%}
          {%- set timeSet.dict      = [] -%}
          {%- set pricing.value     = 0 -%}

          {%- for i in range(reqUsageSlices * (arrSize+2)) if (totalLen.value<durationMinutes) and (usageLen == 0 or sliceSet.idx < kwh_usage | length) and priceSet.idx < arrSize -%}
            {%- set workLen         = min(priceSet.left, sliceSet.left, durationMinutes - totalLen.value ) -%}
            {%- set kwh             = 1 if usageLen == 0 else kwh_usage[sliceSet.idx] -%}
            {%- set kwh_price       = prices[priceSet.idx].price -%}
            {%- set priceFactor     = kwh * workLen / usageWindow -%}
            {%- set tmpValue        = kwh_price * priceFactor -%}
            {%- set pricing.value   = pricing.value + tmpValue -%}
            {%- set timeValue       = priceStartTime + 60 * totalLen.value -%}
            {%- set timeSet.dict    = timeSet.dict + [ dict(start=timeValue | as_datetime | as_local | string, minutes=workLen, kWh_price=kwh_price, est_kWh=priceFactor | round(6), sum=tmpValue | round(6) ) ] -%}
            
            {%- set priceSet.left   = priceSet.left - workLen -%}
            {%- if priceSet.left == 0 -%}
              {%- set priceSet.left = priceWindow -%}
              {%- set priceSet.idx  = priceSet.idx + 1 -%}
            {%- endif  -%}
            
            {%- set sliceSet.left   = sliceSet.left - workLen -%}
            {%- if sliceSet.left == 0 -%}
              {%- set sliceSet.left = usageWindow -%}
              {%- set sliceSet.idx  = sliceSet.idx + 1 -%}
            {%- endif  -%}

            {%- set totalLen.value=totalLen.value + workLen -%}
          {%- endfor -%}
          {#-####################################################################-#}
          {%- if (resultCheap.pricing==none or
                  pricing.value<resultCheap.pricing or
                 (returnFirstBool and pricing.value<=resultCheap.pricing and (resultCheap.priceStartTime is none or priceStartTime<resultCheap.priceStartTime)) or
                 (not returnFirstBool and pricing.value<=resultCheap.pricing and (resultCheap.priceStartTime is none or priceStartTime>resultCheap.priceStartTime))
                 ) and (priceStartTime + 60 * durationMinutes <= latestDatetime) -%}
            {%- set resultCheap.pricing        = pricing.value -%}
            {%- set resultCheap.priceStartTime = priceStartTime -%}
            {%- set resultCheap.explain         = timeSet.dict -%}
          {%- endif -%}
          {%- if (resultExpensive.pricing==none or
                  pricing.value>resultExpensive.pricing or
                 (returnFirstBool and pricing.value>=resultExpensive.pricing and (resultExpensive.priceStartTime is none or priceStartTime<resultExpensive.priceStartTime)) or
                 (not returnFirstBool and pricing.value>=resultExpensive.pricing and (resultExpensive.priceStartTime is none or priceStartTime>resultExpensive.priceStartTime))
                 ) and (priceStartTime + 60 * durationMinutes <= latestDatetime) -%}
            {%- set resultExpensive.pricing        = pricing.value -%}
            {%- set resultExpensive.priceStartTime = priceStartTime -%}
            {%- set resultExpensive.explain         = timeSet.dict -%}
          {%- endif -%}
        {%- endif -%}
      {%- endfor -%}
    {%- endfor -%}
  {%- endif -%}

  {#-####################################################################-#}
  {#- Output result as a string formatted as JSON - this can then be parsed by whatever called the macro -#}
  {%- set FinalCheapDict     = dict(price=none) if resultCheap.pricing     == -1 or resultCheap.priceStartTime    ==None else dict(startTime =resultCheap.priceStartTime     | as_datetime | as_local | string, endTime =(resultCheap.priceStartTime + durationMinutes*60)     | as_datetime | as_local | string, price = resultCheap.pricing     | round(6)) -%}
  {%- set FinalExpensiveDict = dict(price=none) if resultExpensive.pricing == -1 or resultExpensive.priceStartTime==None else dict(startTime =resultExpensive.priceStartTime | as_datetime | as_local | string, endTime =(resultExpensive.priceStartTime + durationMinutes*60) | as_datetime | as_local | string, price = resultExpensive.pricing | round(6)) -%}
  {%- if (FinalCheapDict.price is none or FinalExpensiveDict.price is none) and status=="ok" -%}
    {%- set status="noWindowFound" -%}
  {%- endif -%}

  {# convert price into human readable (if the should be returned #}
  {%- if mode in ["details", "detailscompact"] -%}
    {%- set pricesOut = namespace(dict=[]) %}
    {%- for item in prices %}
      {%- set pricesOut.dict = pricesOut.dict + [{'price': item.price, 'start': item.start | as_datetime | as_local | string }] %}
    {%- endfor %}
  {%- endif -%}
  
  {%- set resultDetails = dict( pricingWindow    = priceWindow | int,
                                usageWindow      = usageWindow | int ) -%}
  {%- set resultWindow  = dict( earliestDatetime = earliestDatetime | as_datetime | as_local | string,
                                latestDatetime   = latestDatetime   | as_datetime | as_local | string,
                                duration         = durationMinutes  | int ) %}
  {%- set validateResult = dict(
                            dict(mode=validateData).items() | list +
                              ([] if validateData=="ignore" else 
                               (dict(check=validate.check).items() | list +
                                 ([] if validate.check=="ok" else dict(kept=validate.idx, lastGood=(none if validate.lastGood==None else validate.lastGood.start | as_datetime | as_local) | string, invalid=(none if validate.this==None else validate.this.start | as_datetime | as_local) | string).items() | list)))) %}
  {%- set result = dict(  window         = dict(resultWindow.items()       | list + ([] if mode not in ["details", "detailscompact"] else resultDetails.items()                         | list)),
                          cheap          = dict(FinalCheapDict.items()     | list + ([] if mode not in ["details", "detailscompact"] else dict(explain=(resultCheap.explain     if mode=="details" else OptimizeData(resultCheap.explain, prices) | from_json)    ).items() | list) + dict(isCheapNow      = none if FinalCheapDict.price    ==none else now() | as_timestamp | timestamp_custom('%Y-%m-%d %H:%M') == FinalCheapDict.startTime     | as_timestamp | timestamp_custom('%Y-%m-%d %H:%M')).items() | list ),
                          expensive      = dict(FinalExpensiveDict.items() | list + ([] if mode not in ["details", "detailscompact"] else dict(explain=(resultExpensive.explain if mode=="details" else OptimizeData(resultExpensive.explain, prices) | from_json)).items() | list) + dict(isExpensiveNow  = none if FinalExpensiveDict.price==none else now() | as_timestamp | timestamp_custom('%Y-%m-%d %H:%M') == FinalExpensiveDict.startTime | as_timestamp | timestamp_custom('%Y-%m-%d %H:%M')).items() | list ),
                          mode           = mode,
                          dataValidation = validateResult,
                          status         = status ) %}
  {%- set result = dict( result.items() | list +
                        (dict(prices=pricesOut.dict) if mode in ["details", "detailscompact"] else dict()).items() | list +
                        (dict() if hint == "" else dict(hint = hint)).items() | list ) -%}                      
                      
  {%- if mode == "cheapprice" -%}
    {{- result.cheap.price -}}
  {%- elif mode == "cheapstart" -%}
    {{- result.cheap.startTime | as_datetime if result.price != none else none -}}
  {%- elif mode == "cheapend" -%}
    {{- result.cheap.endTime | as_datetime if result.price != none else none -}}
  {%- elif mode == "ischeapnow" -%}
    {{- result.cheap.isCheapNow -}}
  {%- elif mode == "expensiveprice" -%}
    {{- result.expensive.price -}}
  {%- elif mode == "expensivestart" -%}
    {{- result.expensive.startTime | as_datetime if result.price != none else none -}}
  {%- elif mode == "expensiveend" -%}
    {{- result.expensive.endTime | as_datetime if result.price != none else none -}}
  {%- elif mode == "isexpensivenow" -%}
    {{- result.expensive.isExpensiveNow -}}
  {%- else -%}
    {{- result | to_json -}}
  {%- endif -%}
{%- endmacro -%}
